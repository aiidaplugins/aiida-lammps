[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "aiida-lammps"
dynamic = ["version", "description"]
authors = [{name = "Chris Sewell", email = "chrisj_sewell@hotmail.com"}, {name = "Jonathan Chico", email = "jonathan.chico@sandvik.com"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Framework :: AiiDA"
]
keywords = ["aiida", "workflows", "lammps"]
requires-python = ">=3.8"
dependencies = [
    "aiida-core[atomic_tools]>=2.0.0,<3.0.0",
    "importlib_resources",
    "jsonschema",
    "numpy",
    "packaging",
    "python-dateutil"
]

[project.urls]
Documentation = "https://aiida-lammps.readthedocs.io"
Source = "https://github.com/aiidaplugins/aiida-lammps"

[project.optional-dependencies]
tests = [
    'pgtest~=1.3',
    'pytest~=6.0',
    'pytest-regressions~=2.3',
    "pytest-cov",
    "coverage",
    "pytest-timeout",
    "pytest-regressions"
]

pre-commit = [
    'pre-commit~=2.17',
    'pylint~=2.17.2',
    'pylint-aiida~=0.1.1',
    'toml',
]

docs = [
    'sphinx~=6.2.1',
    'sphinx-copybutton~=0.5.2',
    'sphinx-book-theme~=1.0.1',
    'sphinx-click~=4.4.0',
    'sphinx-design~=0.4.1',
    'sphinxcontrib-details-directive~=0.1.0',
    'sphinx-autoapi~=3.0',
    'myst_parser~=1.0.0',
    "furo"
]

[project.entry-points."aiida.calculations"]
"lammps.base" = "aiida_lammps.calculations.base:LammpsBaseCalculation"
"lammps.raw" = "aiida_lammps.calculations.raw:LammpsRawCalculation"

[project.entry-points."aiida.parsers"]
"lammps.base" = "aiida_lammps.parsers.base:LammpsBaseParser"
"lammps.raw" = "aiida_lammps.parsers.raw:LammpsRawParser"

[project.entry-points."aiida.data"]
"lammps.potential" = "aiida_lammps.data.potential:LammpsPotentialData"
"lammps.trajectory" = "aiida_lammps.data.trajectory:LammpsTrajectory"

[project.entry-points."aiida.workflows"]
"lammps.base" = "aiida_lammps.workflows.base:LammpsBaseWorkChain"
"lammps.relax" = "aiida_lammps.workflows.relax:LammpsRelaxWorkChain"
"lammps.md" = "aiida_lammps.workflows.md:LammpsMDWorkChain"

[tool.flit.module]
name = "aiida_lammps"

[tool.flit.sdist]
exclude = [
    "docs/",
    "tests/",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_lammps"]

[tool.isort]
skip = ["venv"]
# Force imports to be sorted by module, independent of import type
force_sort_within_sections = true
# Group first party and local folder imports together
no_lines_before = ["LOCALFOLDER"]

# Configure isort to work without access to site-packages
known_first_party = ["aiida_lammps"]

# Settings for Black compatibility
profile = "black"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = pre-commit,{3.8,3.9,3.10}-aiida_lammps
requires = virtualenv >= 20
isolated_build = True

[testenv]
setenv = AIIDA_PATH={toxworkdir}/.aiida
allowlist_externals =
                    mkdir
                    rm
commands =
	 mkdir -p {toxworkdir}/.aiida
	 pytest --lammps-exec lmp_serial {posargs}
	 rm -r {toxworkdir}/.aiida
extras = tests

[testenv:pre-commit]
allowlist_externals = bash
commands = bash -ec 'pre-commit run --all-files || ( git diff; git status; exit 1; )'
extras =
       pre-commit
       tests

[testenv:docs-{clean,update}]
extras = docs
allowlist_externals =
    rm
    echo
commands =
    clean: rm -rf docs/_build
    clean: rm -rf docs/source/reference/apidoc
    sphinx-build -n -W --keep-going -c docs/source docs/source docs/_build
commands_post = echo "open docs/_build/index.html"

[pytest]
addopts = --ignore=setup.py
timeout = 180
filterwarnings =
    ignore::DeprecationWarning:frozendict.*
    ignore::DeprecationWarning:sqlalchemy_utils.*
    ignore::DeprecationWarning:reentry.*
markers =
    lammps_call: calls the lammps executable

[flake8]
max-line-length = 140
import-order-style = edited
[pycodestyle]
max-line-length = 140
"""
