[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "aiida-lammps"
dynamic = ["version", "description"]
authors = [{name = "Chris Sewell", email = "chrisj_sewell@hotmail.com"}, {name = "Jonathan Chico", email = "jonathan.chico@sandvik.com"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Framework :: AiiDA"
]
keywords = ["aiida", "workflows", "lammps"]
requires-python = ">=3.8"
dependencies = [
    "aiida-core[atomic_tools]>=2.0.0,<3.0.0",
    "importlib_resources",
    "jsonschema",
    "numpy",
    "packaging",
    "python-dateutil"
]

[project.urls]
Documentation = "https://aiida-lammps.readthedocs.io"
Source = "https://github.com/aiidaplugins/aiida-lammps"

[project.optional-dependencies]
tests = [
    'pgtest~=1.3',
    'pytest~=7.4',
    'pytest-regressions~=2.3',
    "pytest-cov",
    "coverage",
    "pytest-timeout",
    "pytest-regressions"
]

docs = [
    'sphinx~=6.2.1',
    'sphinx-copybutton~=0.5.2',
    'sphinx-book-theme~=1.0.1',
    'sphinx-click~=5.1.0',
    'sphinx-design~=0.4.1',
    'sphinxcontrib-details-directive~=0.1.0',
    'sphinx-autoapi~=3.0',
    'myst_parser~=2.0.0',
    "furo"
]

[project.entry-points."aiida.calculations"]
"lammps.base" = "aiida_lammps.calculations.base:LammpsBaseCalculation"
"lammps.raw" = "aiida_lammps.calculations.raw:LammpsRawCalculation"

[project.entry-points."aiida.parsers"]
"lammps.base" = "aiida_lammps.parsers.base:LammpsBaseParser"
"lammps.raw" = "aiida_lammps.parsers.raw:LammpsRawParser"

[project.entry-points."aiida.data"]
"lammps.potential" = "aiida_lammps.data.potential:LammpsPotentialData"
"lammps.trajectory" = "aiida_lammps.data.trajectory:LammpsTrajectory"

[project.entry-points."aiida.workflows"]
"lammps.base" = "aiida_lammps.workflows.base:LammpsBaseWorkChain"
"lammps.relax" = "aiida_lammps.workflows.relax:LammpsRelaxWorkChain"
"lammps.md" = "aiida_lammps.workflows.md:LammpsMDWorkChain"

[tool.flit.module]
name = "aiida_lammps"

[tool.flit.sdist]
exclude = [
    "docs/",
    "tests/",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_lammps"]

[tool.ruff]
extend-select = ["B0", "C4", "I", "ICN", "ISC", "N", "RUF", "SIM", "UP"]
extend-ignore = ["B028", "ISC001"]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = pre-commit,{3.8,3.9,3.10}-aiida_lammps
requires = virtualenv >= 20
isolated_build = True

[testenv]
setenv = AIIDA_PATH={toxworkdir}/.aiida
allowlist_externals =
                    mkdir
                    rm
commands =
	 mkdir -p {toxworkdir}/.aiida
	 pytest --lammps-exec lmp_serial {posargs}
	 rm -r {toxworkdir}/.aiida
extras = tests

[testenv:docs-{clean,update}]
extras = docs
description =
    clean: Build the documentation (remove any existing build)
    update: Build the documentation (modify any existing build)
passenv = RUN_APIDOC
setenv =
    update: RUN_APIDOC = False
changedir = docs
allowlist_externals =
    make
    rm
    echo
commands =
    clean: make clean
    make debug

[pytest]
addopts = --ignore=setup.py
timeout = 180
filterwarnings =
    ignore::DeprecationWarning:frozendict.*
    ignore::DeprecationWarning:sqlalchemy_utils.*
    ignore::DeprecationWarning:reentry.*
markers =
    lammps_call: calls the lammps executable

"""
