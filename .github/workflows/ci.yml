name: CI

on:
  push:
    branches: [master]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  pull_request:

jobs:

  pre-commit:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
    - uses: pre-commit/action@v3.0.0

  tests:

    name: pytest (Python ${{ matrix.python-version }}, LAMMPS ${{ matrix.lammps-version }})

    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.8"
            lammps-version: "2020.03.03"
          - python-version: "3.8"
            lammps-version: "2020.12.24"
          - python-version: "3.9"
            lammps-version: "2020.12.24"
          - python-version: "3.9"
            lammps-version: "2020.03.03"
          - python-version: "3.10"
            lammps-version: "2021.09.29"

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: test_lammps
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup conda
        uses: s-weigand/setup-conda@v1.2.1
        with:
          # update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: conda-forge

      - name: install lammps
        run: conda install -y lammps==${{ matrix.lammps-version }}

      - name: Install `jpeg` package
        if: matrix.lammps-version == '2021.09.29'
        run: conda install -c conda-forge jpeg

      - name: Make sure virtualevn>20 is installed, which will yield newer pip and possibility to pin pip version.
        run: pip install "virtualenv>20"
      - name: Install Tox
        run: pip install tox

      - name: Run pytest
        run: |
          tox -e ${{ matrix.python-version }}-aiida_lammps -- tests/ --cov=./aiida_lammps --cov-append --cov-report=xml --cov-report=term-missing

      - name: Upload to Codecov
        if: matrix.python-version == 3.8
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: pytests-lammps
          flags: pytests
          fail_ci_if_error: true

  # https://github.com/marketplace/actions/alls-green#why
  check:  # This job does nothing and is only used for the branch protection

    if: always()

    needs:
    - pre-commit
    - tests

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  publish:
    name: Publish to PyPi
    needs: [pre-commit, tests]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4.1.1
      - name: Set up Python 3.8
        uses: actions/setup-python@v4.5.0
        with:
          python-version: "3.8"
      - name: install flit
        run: |
          pip install flit~=3.4
      - name: Build and publish
        run: |
          flit publish
        env:
          FLIT_USERNAME: __token__
          FLIT_PASSWORD: ${{ secrets.PYPI_KEY }}
