"""Configuration for Sphinx documentation build.

It is recommended to use tox to run the build (see tox.ini):
`tox -e docs-clean` and `tox -e docs-update`,
or directly: `sphinx-build -n -W --keep-going docs/source docs/_build`
"""

import pathlib
import time

from aiida.manage.configuration import Profile, load_profile
from aiida_lammps import __version__

# -- AiiDA-related setup --------------------------------------------------

# Load the dummy profile even if we are running locally, this way the
# documentation will succeed even if the current
# default profile of the AiiDA installation does not use a Django backend.
load_profile(Profile("docs", {"process_control": {}, "storage": {}}))

project = "AiiDA LAMMPS"
copyright = f"2021-{time.localtime().tm_year}, AiiDA Team. All rights reserved"
AUTHOR = "AiiDA Team"
VERSION = __version__

extensions = [
    "myst_parser",
    "sphinx.ext.mathjax",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinx_copybutton",
    "sphinx.ext.autodoc",
    "sphinx_click.ext",
    "sphinx_design",
    "autodoc2",
    "sphinx.ext.napoleon",
    "aiida.sphinxext",
]

intersphinx_mapping = {
    "python": ("https://docs.python.org/3.9", None),
    "aiida": ("https://aiida-core.readthedocs.io/en/latest", None),
    "click": ("https://click.palletsprojects.com/", None),
    "pymatgen": ("https://pymatgen.org/", None),
}


# Settings for the `autoapi.extension` automatically generating API docs
filepath_docs = pathlib.Path(__file__).parent.parent
filepath_src = filepath_docs.parent / "src/aiida_lammps"
autoapi_type = "python"
autoapi_dirs = [filepath_src]
autoapi_ignore = [filepath_src / "*cli*"]
autoapi_root = str(filepath_docs / "source" / "reference" / "api" / "auto")
autoapi_keep_files = True
autoapi_add_toctree_entry = False

autodoc2_packages = [
    {
        "path": "../../src/aiida_lammps",
        "exclude_files": ["_docs.py"],
        "auto_mode": True,
    }
]
autodoc2_hidden_objects = ["dunder", "private", "inherited"]
autodoc2_replace_annotations = [
    ("re.Pattern", "typing.Pattern"),
    ("markdown_it.MarkdownIt", "markdown_it.main.MarkdownIt"),
]
autodoc2_replace_bases = [
    ("sphinx.directives.SphinxDirective", "sphinx.util.docutils.SphinxDirective"),
]
autodoc2_docstring_parser_regexes = [
    ("myst_parser", "myst"),
    (r"myst_parser\.setup", "myst"),
]

# Settings for the `sphinx_copybutton` extension
copybutton_selector = "div:not(.no-copy)>div.highlight pre"
copybutton_prompt_text = (
    r">>> |\.\.\. |(?:\(.*\) )?\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
)
copybutton_prompt_is_regexp = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["**.ipynb_checkpoints", "reference/api/auto/aiida_lammps/index.rst"]

# -- MyST options

myst_enable_extensions = [
    "deflist",
    "colon_fence",
    "substitution",
    "attrs_inline",
    "substitution",
]
myst_substitutions = {
    "aiida_logo": '<img src="../_static/logo_aiida.svg" alt="aiida" class="aiida-logo">',
}

html_theme = "sphinx_book_theme"  # pylint: disable=invalid-name
html_title = f"v{__version__}"  # pylint: disable=invalid-name
html_theme_options = {
    "repository_url": "https://github.com/aiidaplugins/aiida-lammps",
    "github_url": "https://github.com/aiidaplugins/aiida-lammps",
    "use_edit_page_button": True,
    "navigation_with_keys": False,
    "logo": {
        "text": "AiiDA LAMMPS",
        "image_light": "_static/logo.png",
        "image_dark": "_static/logo.png",
    },
}
html_static_path = ["_static"]
html_context = {
    "github_user": "aiidaplugins",
    "github_repo": "aiida-lammps",
    "github_version": "main",
    "doc_path": "docs/source",
    "default_mode": "dark",
}

html_sidebars = {
    "**": [
        "navbar-logo.html",
        "navbar-icon-links.html",
        "sbt-sidebar-nav.html",
        "search-field.html",
    ]
}

html_css_files = ["aiida-custom.css", "aiida-lammps-custom.css"]

autodoc_mock_imports = ["pytest"]
# We should ignore any python built-in exception, for instance
# Warnings to ignore when using the -n (nitpicky) option
nitpicky = True
with open("nitpick-exceptions") as handle:
    nitpick_ignore = [
        tuple(line.strip().split(None, 1))
        for line in handle.readlines()
        if line.strip() and not line.startswith("#")
    ]
