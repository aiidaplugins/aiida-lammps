"""Class for creation of Tersoff potential inputs."""
from aiida_lammps.data.pot_plugins.base_plugin import PotentialAbstract


class Tersoff(PotentialAbstract):
    """Class for creation of Tersoff potential inputs."""

    potential_fname = "potential.pot"

    def validate_data(self, data):
        """Validate the input data."""
        # pylint: disable=unnecessary-pass
        pass

    def get_external_content(self):
        potential_file = (
            "# Potential file generated by aiida plugin "
            "(please check citation in the original file)\n"
        )
        for key in sorted(self.data.keys()):
            potential_file += f"{key}    {self.data[key]}\n"

        return {self.potential_fname: potential_file}

    def get_input_potential_lines(self):  # pylint: disable=arguments-differ

        lammps_input_text = "pair_style      tersoff\n"
        lammps_input_text += f"pair_coeff      * * {self.potential_fname} "
        lammps_input_text += "{kind_symbols}\n"

        return lammps_input_text

    @property
    def allowed_element_names(self):
        allowed = []
        for key in self.data:
            allowed.extend(key.split())
        return list(set(allowed))

    @property
    def atom_style(self):
        return "atomic"

    @property
    def default_units(self):
        return "metal"
