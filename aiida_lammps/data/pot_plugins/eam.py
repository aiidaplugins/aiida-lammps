"""Class for creation of EAM potential inputs."""
# pylint: disable=fixme
from aiida_lammps.data.pot_plugins.base_plugin import PotentialAbstract


class EAM(PotentialAbstract):
    """Class for creation of EAM potential inputs."""

    potential_fname = "potential.pot"

    def validate_data(self, data):
        """Validate the input data."""
        # TODO use schema
        assert "file_contents" in data, data
        assert "type" in data, data

    def get_external_content(self):
        # potential_file = (
        #     "# Potential file generated by aiida plugin "
        #     "(please check citation in the original file)\n"
        # )
        potential_file = ""
        for line in self.data["file_contents"]:
            potential_file += f"{line}"

        return {self.potential_fname: potential_file}

    def get_input_potential_lines(self):  # pylint: disable=arguments-differ

        lammps_input_text = f'pair_style      eam/{self.data["type"]}\n'
        lammps_input_text += f"pair_coeff      * * {self.potential_fname} "
        lammps_input_text += "{kind_symbols}\n"

        return lammps_input_text

    @property
    def allowed_element_names(self):
        return self.data.get("element_names", None)

    @property
    def atom_style(self):
        return "atomic"

    @property
    def default_units(self):
        return "metal"
